source('~/GitHub/SDS385-course-work/Excercise 1/logistic regression/gradient decent.R')
X=as.matrix(data[3:12])
y=as.vector(matrix(nrow=nrow(data),ncol=1))
for(i in 1:nrow(data)){
if(data[i,2]=="M")y[i]=1
else y[i]=0
}
data <- read_csv("~/GitHub/SDS385-course-work/Excercise 1/logistic regression/wdbc.csv",col_names = FALSE)
library(readr)
data <- read_csv("~/GitHub/SDS385-course-work/Excercise 1/logistic regression/wdbc.csv",col_names = FALSE)
X=as.matrix(data[3:12])
y=as.vector(matrix(nrow=nrow(data),ncol=1))
for(i in 1:nrow(data)){
if(data[i,2]=="M")y[i]=1
else y[i]=0
}
source('~/GitHub/SDS385-course-work/Excercise 1/logistic regression/gradient decent.R')
source('~/GitHub/SDS385-course-work/Excercise 1/logistic regression/gradient decent.R')
beta0=as.vector(matrix(1,nrow=10))
ite=1000
eps=0.001
?array
source('~/GitHub/SDS385-course-work/Excercise 1/logistic regression/gradient decent.R')
gradientdecent(X,y,beta0,eps,ite)
gradientdecent(X,y,beta0,eps,ite)
gradientdecent(X,y,beta0,eps,ite)
y
View(omega)
X %*% beta
source('~/GitHub/SDS385-course-work/Excercise 1/logistic regression/gradient decent.R')
gradientdecent(X,y,beta0,eps,ite)
source('~/GitHub/SDS385-course-work/Excercise 1/logistic regression/gradient decent.R')
gradientdecent(X,y,beta0,eps,ite)
source('~/GitHub/SDS385-course-work/Excercise 1/logistic regression/gradient decent.R')
gradientdecent(X,y,beta0,eps,ite)
gradientdecent(X,y,beta0,eps,ite)
t
t
gradientdecent(X,y,beta0,eps,ite)
gradientdecent(X,y,beta0,eps,ite)
gradientdecent(X,y,beta0,eps,ite)
eps
gradientdecent(X,y,beta0,eps,ite)
omega*(1-omega)*(2*y-1)/((2*y-1)*omega+1-y)
omega
y
omega
X
?cbind
X=cbind(X,1)
beta0=as.vector(matrix(1,nrow=11))
ite=1000
eps=0.001
gradientdecent(X,y,beta0,eps,ite)
omega
for(i in 1:ncol(X)){
X[,i]=(X[,i]-mean(X[,i]))/sqrt(var(X[,i]))
}
View(X)
X=as.matrix(data[3:12])
for(i in 1:ncol(X)){
X[,i]=(X[,i]-mean(X[,i]))/sqrt(var(X[,i]))
}
X=cbind(X,1)
View(X)
beta0=as.vector(matrix(0.1,nrow=11))
gradientdecent(X,y,beta0,eps,ite)
gradientdecent(X,y,beta0,eps,ite)
omega
omega*(1-omega)*(2*y-1)/((2*y-1)*omega+1-y)
crossprod(omega*(1-omega)*(2*y-1)/((2*y-1)*omega+1-y),X)
gradientdecent(X,y,beta0,eps,ite)
source('~/GitHub/SDS385-course-work/Excercise 1/logistic regression/gradient decent.R')
gradientdecent(X,y,beta0,eps,ite)
source('~/GitHub/SDS385-course-work/Excercise 1/logistic regression/gradient decent.R')
gradientdecent(X,y,beta0,eps,ite)
result=gradientdecent(X,y,beta0,eps,ite)
result$beta
result$llh
plot(result$llh)
ite=1000
eps=0.00001
result=gradientdecent(X,y,beta0,eps,ite)
plot(result$llh)
eps=0.001
result=gradientdecent(X,y,beta0,eps,ite)
plot(result$llh)
eps=0.0001
result=gradientdecent(X,y,beta0,eps,ite)
plot(result$llh)
source('~/GitHub/SDS385-course-work/Excercise 1/logistic regression/gradient decent.R')
result=gradientdecent(X,y,beta0,eps,ite)
plot(result$negloglikelihood)
result$beta
